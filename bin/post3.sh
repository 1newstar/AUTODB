#!/bin/bash
################################################################################################
#Title: post3.sh
#Purpose: This script bounces the cluster databases, if there are no clusters, it bounces database.
#Created by                                                                                   
#Date: 8/11/15                                                                                         
#Modified by: Huzaifa Z.                                                                                 
################################################################################################
. $WKDIR/bin/12c_Env.sh
MAILID=`grep MAILID $PARFILE  | awk -F"=" '{print $2}'`
export ORACLE_SID=`grep ORACLE_SID $PARFILE  | awk -F"=" '{print $2}'`
export LOGDIR=$WKDIR/logs/$ORACLE_SID
export ORACLE_HOME=`grep NEW_ORA_HOME $PARFILE  | awk -F"=" '{print $2}'`
export PATH=${ORACLE_HOME}/bin:$PATH
export TNS_ADMIN=$ORACLE_HOME/network/admin
DT=`date +%Y-%m-%d`

#MB Added error handling
#HZ Starting cluster service will always error out if db cluster is not installed
#HZ If service is not found or gives error handle by stating service not installed and continue, Do not exit
#HZ check srvctl if existing or not; continue do not exit
export UNQNAME=$ORACLE_SID
echo "`date` Displaying DB Unique Name"
echo "$UNQNAME"

CHECKCL=$LOGDIR/post/post3_${ORACLE_SID}_${DT}_checkcl.log
${ORACLE_HOME}/bin/sqlplus -s '/ as sysdba' << EOF > ${CHECKCL}
select VALUE from v\$parameter where NAME='cluster_database';
EOF

if [ `grep -c TRUE ${CHECKCL}` -ne 0 ]; then
	echo "`date` Checking Status of Database"
	srvctl status database -d $UNQNAME
	if [ $? -ne 0 ]; then
	echo "`date` post3.sh failed"; rm ${OPTION3} > /dev/null; exit 1;
	fi
	echo "`date` Stopping Database"
	srvctl stop database -d $UNQNAME
	if [ $? -ne 0 ]; then
	echo "`date` post3.sh failed"; rm ${OPTION3} > /dev/null; exit 1 ;
	fi
	echo "`date` Checking Dataabse of Database After Stopping Database"
	srvctl status database -d $UNQNAME
	if [ $? -ne 0 ]; then
	echo "`date` post3.sh failed"; rm ${OPTION3} > /dev/null; exit 1 ;
	fi
	echo "`date` Starting Cluster Database"
	srvctl start database -d $UNQNAME
	if [ $? -ne 0 ]; then
	echo "`date` post3.sh failed"; rm ${OPTION3} > /dev/null; exit 1 ;
	fi
	echo "`date` Databse startup completed,Checking the Status Again"
	srvctl status database -d $UNQNAME
	if [ $? -ne 0 ]; then
	echo "`date` post3.sh failed"; rm ${OPTION3} > /dev/null; exit 1 ;
	fi
fi

echo "This Will Create Restore Point (if flashback is on)  and Display Wallet Status"
#Check status of db if open shutdown, if shutdown then continue startup 
#HZ do not exit script if restore point cannot be created, display error and continue to the next step


CREATERESTORE=""
if [ -f ${FAFLAG} ]; then
	CREATERESTORE="create restore point after_12c_upgrade guarantee flashback database;"
fi
echo "Bouncing database..."
BOUNCEDB=$LOGDIR/post/post3${ORACLE_SID}_bouncedb_${DT}.log
${ORACLE_HOME}/bin/sqlplus -s -l  '/ as sysdba' << EOF1 > ${BOUNCEDB}
WHENEVER SQLERROR EXIT SQL.SQLCODE
set lines 200
set pages 200
set head off
shutdown immediate
startup
show parameter pfile
show parameter compatible
exit SQL.SQLCODE
EOF1
if [ $? -ne 0 ]; then
	echo "post3.sh failed. Error: `grep ORA- ${BOUNCEDB} | head -1`"
	rm ${OPTION3} > /dev/null
	exit 1
else 
	echo "Database bounced.."
fi
	
CREATERP=$LOGDIR/post/post3${ORACLE_SID}_${DT}.log
${ORACLE_HOME}/bin/sqlplus -s -l  '/ as sysdba' << EOF2 > ${CREATERP}
WHENEVER SQLERROR EXIT SQL.SQLCODE
set lines 200 
set pages 200
set head off
select * from gV\$encryption_wallet;
select * from gv\$restore_point;
${CREATERESTORE}
select * from gv\$restore_point;
exit SQL.SQLCODE
EOF2
if [ $? -ne 0 ]; then
	echo "`date` Error: `grep ORA- ${CREATERP} | head -1`"
	rm ${OPTION3} > /dev/null
	exit 1
else 
	if [ `echo ${CREATERESTORE} | grep -c flashback` -eq 1 ]; then
                echo "`date` Restore Point: after_12c_upgrade created."
        else
                echo "Creation of restore point skipped. Archivelog or Flashback is turned off."
        fi

fi
SUBJECT="AUTODB : Post Upgrade STATUS:COMPLETE - ${ORACLE_SID}@${HOSTNAME}"
echo "Post Upgrade Completion Successful on  - ${ORACLE_SID}@${HOSTNAME}. This concludes the AUTODB utility. For details please view logs under $LOGDIR   - AutoGenerated by AUTODB" | mailx -s "$SUBJECT" $MAILID
if [ $? -ne 0 ]; then
	echo "`date` Unable send notification email"

else
	echo "`date` notification email sent"
fi

echo "----------------------------------------------------------------------------------------------------"
echo ""
echo ""
echo "					End of Post Upgrade Stage					  "	
echo ""
echo ""
